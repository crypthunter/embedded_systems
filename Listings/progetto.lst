C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE PROGETTO
OBJECT MODULE PLACED IN .\Objects\progetto.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE progetto.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\progetto.lst) TABS(2) OBJECT(.\Objects\progetto.obj)

line level    source

   1          #include <c8051f020.h> // SFR definitions
   2          
   3          //---------------------------------------------------VARIABILI--------------------------------------------
             ---------------------------
   4          // 0 accelerometro, 1 temperatura, 2 display
   5          unsigned char select_interrupt;
   6          //quante volte va in overflow
   7          unsigned char t3_overflow_display = 0;
   8          unsigned char t3_overflow_temp = 0;
   9          unsigned char flag_mma = 0;
  10          unsigned char flag_temp = 0;
  11          unsigned char flag_display = 0;
  12          unsigned char smBusy = 0;
  13          //tipo di azione che deve fare smbus
  14          // 0 = mma, 1 = display, 2 = temperatura
  15          unsigned char interrupt_type = 0;
  16          //variabili per la media
  17          unsigned char avg_cont = 0;
  18          int avg_x = 0;
  19          int avg_y = 0;
  20          int avg_z = 0;
  21          //------------------------------------------------------PWM-----------------------------------------------
             ----------------------------
  22          //bottone e backlight
  23          sbit button = P3^7;
  24          sbit backlight = P0^6;
  25          //contatore per il timer1
  26          unsigned char t1overFlow = 0;
  27          // 0 = bottone non premuto, 1 = bottone premuto
  28          unsigned char premuto = 0;
  29          //se è passato più di un secondo da quando il bottone è stato premuto
  30          unsigned char unSec = 0;
  31          //variabile per decidere se il backlight deve lampeggiare ( molto velocemente così da sembrare ad una lumi
             -nosità differente)
  32          //oppure restare spento
  33          unsigned char acceso = 1;
  34          //variabile per controllare la luminosità
  35          unsigned char lumi;
  36          //--------------------------------------------COSTANTI PERIFERICHE----------------------------------------
             --------------------------
  37          #define SMB_START 0x08 //ricevuto start
  38          #define SMB_RESTART 0x010 //ricevuto restart
  39          
  40          #define SMB_FIRSTWRITE 0x18 //scrivo il primo valore
  41          #define SMB_WRITE 0x28 // scrivo gli altri valori
  42          
  43          #define SMB_FIRSTREAD 0x40  //primo read
  44          #define SMB_READ 0x50 //altri read
  45          #define SMB_READ_NACK 0x58  //dopo che ho dato AA = 0
  46          
  47          #define MMA_WRITE 0x98 //indirizzo per scrivere sull'accelerometro
  48          #define MMA_READ 0x99  //indirizzo per leggere dall'accelerometro
  49          
  50          #define TEMP_READ 0x91  //indirizzo per leggere dal termometro
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 2   

  51          
  52          #define DISPLAY_WRITE 0x7c  //indirizzo per leggere dal display
  53          
  54          //--------------------------------------------------------ACCELEROMETRO-----------------------------------
             ---------------------------
  55          //definizione registri accelerometro
  56          #define   XOUT        0x00
  57          #define   YOUT        0x01
  58          #define   ZOUT        0x02
  59          #define   MODE        0x07
  60          
  61          unsigned char mma_init [] = {MODE, 0x01};
  62          unsigned char mma_pos = 0;
  63          unsigned char mma_init_finished = 0;
  64          unsigned char mma_read_ready = 0;
  65          
  66          char buffer_x[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  67          char buffer_y[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  68          char buffer_z[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  69          unsigned char buffer_pos = 0;
  70          
  71          int mma_value_read = 0;
  72          int i = 0;
  73          float xyz[3];
  74          unsigned char xyz_mma_pos = 0;
  75          code float TILT_XY[64] = {0, 2.69, 5.38, 8.08, 10.81, 13.55, 16.33, 19.16, 22.02, 24.95, 27.95, 31.04, 34.
             -23, 37.54, 41.01, 44.68, 48.59, 52.83, 57.54, 62.95, 69.64, 79.86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  76            0, 0, 0, 0, 0, 0, 0, -79.86, -69.64, -62.95, -57.54, -52.83, -48.59, -44.68, -41.01, -37.54, -34.23, -31
             -.04, -27.95, -24.95, -22.02, -19.16, -16.33, -13.55, -10.81, -8.08, -5.38, -2.69}; 
  77          code float TILT_Z[64] = {90.00, 87.31, 84.62, 81.92, 79.19, 76.45, 73.67, 70.84, 67.98, 65.05, 62.05, 58.9
             -6, 55.77, 52.46, 48.99, 45.32, 41.41, 37.17, 32.46, 27.05, 20.36, 10.14, 0, 0, 0, 0, 0, 0, 
  78            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.14, -20.36, -27.05, -32.46, -37.17, -41.41, -45.32, -48
             -.99, -52.46, -55.77, -58.96, -62.05, -65.05, -67.98, -70.84, -73.67, -76.45, -79.19, -81.92, -84.62};
  79          
  80          //---------------------------------------DISPLAY---------------------------------------------
  81          unsigned char display_init_values[] = {0x38, 0x39, 0x14, 0x74, 0x54, 0x6F, 0x0C, 0x01};
  82          unsigned char display_values[] = {0x80, 0x01, 0x40, 'T',':', '2', '0', 0x80, 0xC0, 0x40, 'X', ':', '2' , '
             -0', 'Y', ':', '5', '0', 'Z', ':', '4', '0'};
  83          //variabile che indica se l'init è finito
  84          unsigned char display_init = 0;
  85          unsigned char display_init_pos = 0;
  86          unsigned char cont = 0;
  87          unsigned char cont1 = 0;
  88          unsigned char write_finished = 0;
  89          //---------------------------------------TEMPERATURA-----------------------------------------
  90          int tempH = 0;
  91          int tempL = 0;
  92          //variabile che indica se ho letto la parte alta della temperatura
  93          unsigned char readH = 0;  
  94          float temp_float = 0;
  95          int temp_int = 0;
  96          int decine = 0;
  97          int unita = 0;
  98          //---------------------------------------PROGRAMMA-------------------------------------------
  99          void init (void) {
 100   1        //abilita iinterrupt globali
 101   1        EA = 1;
 102   1        //disabilita watchdog timer
 103   1        WDTCN = 0xde;
 104   1        WDTCN = 0xad; 
 105   1        //oscillatore
 106   1        OSCICN &= 0x14;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 3   

 107   1        //clock interno
 108   1        XBR0 = 0x00;
 109   1        //abilita smbus e uart ( per spostare i pin)
 110   1        XBR0 |= 0x05;
 111   1        //crossbar, gestisce i pin
 112   1        XBR1 = 0x00;
 113   1        XBR2 = 0x40;
 114   1        //push-pull
 115   1        P1MDOUT |= 0x40;
 116   1        //push pull display
 117   1        P0MDOUT |= 0x40;
 118   1        //per l'interrupt del bottone
 119   1        EIE2 |= 0x20;
 120   1        //iinterrupt del smbus
 121   1        EIE1 |= 0x02;
 122   1        //abilita smbus
 123   1        ENSMB = 1;
 124   1        AA = 1;
 125   1      }
 126          
 127          void timer3_init()
 128          {
 129   1        TMR3H = 0xbe;
 130   1        TMR3L = 0xe6;
 131   1        //abilita iinterrupt timer3
 132   1        EIE2 |= 0x01;
 133   1        //fa partire il timer 3
 134   1        TMR3CN |= 0x04;
 135   1      }
 136          
 137          void mma_initialize()
 138          {
 139   1        //altrimenti non entra nell'interrupt
 140   1        flag_mma = 1;
 141   1        STA = 1;
 142   1        while(!mma_init_finished);
 143   1        //STO = 1;
 144   1        //for(i = 0; i < 1000; i++);
 145   1        mma_init_finished = 2;
 146   1        flag_mma = 0;
 147   1        smBusy = 0;
 148   1        //corrisponde a nessuna azione da fare su smbus
 149   1        interrupt_type = 99;
 150   1      }
 151          
 152          void timer3() interrupt 14
 153          {
 154   1        t3_overflow_display ++;
 155   1        t3_overflow_temp ++;
 156   1        //ogni volta che va in overflow (100ms)
 157   1        flag_mma = 1;
 158   1        if(t3_overflow_display == 3)
 159   1        {
 160   2          flag_display = 1;
 161   2          t3_overflow_display = 0;
 162   2        }
 163   1        
 164   1        if(t3_overflow_temp == 10)
 165   1        {
 166   2          flag_temp = 1;
 167   2          t3_overflow_temp = 0;
 168   2        }
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 4   

 169   1        
 170   1        TMR3H = 0xbe;
 171   1        TMR3L = 0xe6;
 172   1        //resetta flag overflow
 173   1        TMR3CN &= 0x7f;
 174   1      }
 175          /*
 176                                            **********************************************************
 177                                            ***********************GESTIONE PWM***********************
 178                                            **********************************************************
 179          */
 180          
 181          //resetta il timer 2 senza fermarlo
 182          void resetTimer2()
 183          {
 184   1        TF2 = 0;
 185   1        TH2 = 0xf9;
 186   1        TL2 = 0x7e; 
 187   1      }
 188          
 189          void setLumi()
 190          {
 191   1        resetTimer2();
 192   1        TR2 = 1;
 193   1      }
 194          
 195          //quando il timer va in iinterrupt sono passati 200 ms, incrementa di poco la luminosità del backlight
 196          void timer2() interrupt 5
 197          {
 198   1        char lumiStep = 1;
 199   1        lumi = lumi + lumiStep;
 200   1        resetTimer2();
 201   1      }
 202          
 203          //resetta il timer per contare 200ms, e t1overFlow a 0 per contare 1s
 204          void resetTimer1()
 205          {
 206   1          t1overFlow = 0;
 207   1          TF1 = 0;
 208   1          TH1 = 0x7d;
 209   1          TL1 = 0xcb; 
 210   1          TR1 = 0;
 211   1      }
 212          
 213          //immma_posta il necessario per il programma
 214          void pwm_setup()
 215          {
 216   1        //timer 0 a 8 bbit, timer 1 a 16 bbit
 217   1        TMOD = 0x10;
 218   1        //clock intero per il timer0
 219   1        CKCON = 0x8;
 220   1        //luminosità iniziale del backlight, 0 = luminosità massima
 221   1        lumi = 0;
 222   1        //abilita gli iinterrupt di timer0, timer1 e timer2
 223   1        ET0 = 1;
 224   1        ET1 = 1;
 225   1        ET2 = 1;
 226   1        //immma_posta il valore iniziale del timer 1 (conta 200 ms)
 227   1        TH1 = 0x7d;
 228   1        TL1 = 0xcb;
 229   1        //fa partire il timer 0 che gestisce pwm
 230   1        TR0 = 1;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 5   

 231   1      }
 232           
 233          //iinterrupt del timer0
 234          void timer0() interrupt 1
 235          {
 236   1        //il backlight lampeggia solo se la variabile è a 1
 237   1        if (acceso == 1)
 238   1        {
 239   2          if (!backlight) { 
 240   3            backlight = 1;    // cambia stato backlight
 241   3            TH0 = lumi; 
 242   3            TF0 = 0;    //pulisce flag interrput
 243   3          }
 244   2          else {      
 245   3            backlight = 0;
 246   3            TH0 = 255 - lumi; 
 247   3            TF0 = 0;
 248   3          }
 249   2        }
 250   1      }
 251          
 252          void buttonInt() interrupt 19
 253          {
 254   1        //se non stavo premendo il bottone e lo premo
 255   1        if(premuto == 0)
 256   1        {
 257   2          //fa partire il timer che deve contare 1 secondo
 258   2          TR1 = 1;
 259   2          //resetta l'interrupt
 260   2          EIE2 |= 0x20;
 261   2          P3IF &= 0x7f;
 262   2          //cambia in rising edge per avere un interruptt al rilascio del bottone
 263   2          P3IF |= 0x08;
 264   2          premuto = 1;
 265   2        }
 266   1        //se sto premendo il bottone e quando rilascio non è passato un secondo, deve cambiare lo stato del backl
             -ight
 267   1        else if (premuto == 1 && unSec == 0)
 268   1        {
 269   2          //resetto l'interrupt
 270   2          EIE2 |= 0x20;
 271   2          P3IF &= 0x7f;
 272   2          //rimette in falling edge il bottone
 273   2          P3IF &= 0x77;
 274   2          //cambio stato backlight
 275   2          acceso = !acceso;
 276   2          backlight = 0;
 277   2          premuto = 0;
 278   2          unSec = 0;
 279   2          //resetto e disabilito il timer
 280   2          resetTimer1();
 281   2        }
 282   1        //se lascio il bottone ma è passato più di un secondo
 283   1        else if (premuto == 1 && unSec == 1)
 284   1        {
 285   2          //devo fermare il timer2 usato per regolare la luminosità
 286   2          TR2 = 0;
 287   2          resetTimer2();
 288   2          premuto = 0;
 289   2          unSec = 0;
 290   2          //resetta e disabilito il timer
 291   2          resetTimer1();
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 6   

 292   2          //resetta l'interrupt
 293   2          EIE2 |= 0x20;
 294   2          P3IF &= 0x7f;
 295   2          //rimette in falling edge il bottone
 296   2          P3IF &= 0x77;
 297   2        }
 298   1      }
 299          
 300          void timer1() interrupt 3
 301          {
 302   1        t1overFlow++;
 303   1        //se il contatore è a 5 significa che è passato 1 secondo
 304   1        if(t1overFlow == 5)
 305   1        {
 306   2          //fermo il timer
 307   2          resetTimer1();
 308   2          unSec = 1;
 309   2          //immma_posto la luminosità solo se il bottone è acceso
 310   2          if (acceso == 1)
 311   2          {
 312   3            setLumi();
 313   3          }
 314   2        }
 315   1        else
 316   1        {
 317   2          TF1 = 0;
 318   2          TH1 = 0x7d;
 319   2          TL1 = 0xcb; 
 320   2        }
 321   1      }
 322          
 323          /*
 324                                            **********************************************************
 325                                            ***********************ACCELEROMETRO**********************
 326                                            **********************************************************
 327          */
 328          
 329          void accelerometer_interrupt()
 330          {
 331   1        
 332   1        if(mma_pos == sizeof(mma_init))
 333   1            {
 334   2              mma_pos = 0;
 335   2              mma_init_finished = 1;
 336   2              STO = 1;
 337   2              //STA = 1;
 338   2            }
 339   1            switch(SMB0STA)
 340   1            {
 341   2              case SMB_START:
 342   2                SMB0DAT = MMA_WRITE;
 343   2                STA = 0;
 344   2                //smBusy = 1;
 345   2                break;
 346   2              
 347   2              //gli devo dare indirizzo di lettura
 348   2              case SMB_RESTART:
 349   2                SMB0DAT = MMA_READ;
 350   2                STA = 0;
 351   2                break;
 352   2      
 353   2              case SMB_FIRSTWRITE:
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 7   

 354   2              case SMB_WRITE:
 355   2                if(mma_init_finished == 0)
 356   2                {
 357   3                  SMB0DAT = mma_init[mma_pos];
 358   3                  mma_pos++;
 359   3                }
 360   2                else if(mma_init_finished == 2)
 361   2                {
 362   3                  if(!mma_read_ready)
 363   3                  {
 364   4                    SMB0DAT = XOUT;
 365   4                    //dice che mma è pronto a leggere
 366   4                    mma_read_ready = 1;
 367   4                  }
 368   3                  else
 369   3                    STA = 1;
 370   3                }
 371   2                break;
 372   2                
 373   2              case SMB_FIRSTREAD:
 374   2                STA = 0;
 375   2                break;
 376   2              
 377   2              case SMB_READ:
 378   2                mma_value_read = SMB0DAT;
 379   2                mma_value_read &= 00111111;
 380   2                xyz[xyz_mma_pos] = TILT_XY[mma_value_read];
 381   2                if(xyz_mma_pos == 1)
 382   2                  AA = 0;
 383   2              
 384   2                xyz_mma_pos++;
 385   2                break;
 386   2              
 387   2              case SMB_READ_NACK:
 388   2                mma_value_read &= 00111111;
 389   2                xyz[xyz_mma_pos] = TILT_Z[mma_value_read];
 390   2                STO = 1;
 391   2                AA = 1;
 392   2                //reset flag e variabili
 393   2                smBusy = 0;
 394   2                flag_mma = 0;
 395   2                mma_read_ready = 0;
 396   2                xyz_mma_pos = 0;
 397   2              
 398   2                buffer_x[buffer_pos] = xyz[0];
 399   2                buffer_y[buffer_pos] = xyz[1];
 400   2                buffer_z[buffer_pos] = xyz[2];
 401   2              
 402   2                if(buffer_pos == 7)
 403   2                  buffer_pos = 0;
 404   2                else
 405   2                  buffer_pos ++;
 406   2                
 407   2            }
 408   1            SI = 0;
 409   1      }
 410          
 411          void display_interrupt()
 412          {
 413   1        
 414   1        switch(SMB0STA)
 415   1        {
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 8   

 416   2          //primo start
 417   2          case SMB_START:
 418   2            //smBusy = 1;
 419   2            SMB0DAT = DISPLAY_WRITE; // carica indirizzo slave display
 420   2            STA = 0;
 421   2            break;
 422   2          
 423   2          case SMB_FIRSTWRITE:
 424   2          case SMB_WRITE:
 425   2            if(display_init == 0)
 426   2            {
 427   3              SMB0DAT = display_init_values[display_init_pos];
 428   3              display_init_pos++;
 429   3            }
 430   2            //scritture successive all'init
 431   2           else if (display_init == 2)
 432   2            {
 433   3              SMB0DAT = display_values[cont];
 434   3              cont++;
 435   3              if(cont == sizeof(display_values))
 436   3              {
 437   4                STO = 1;
 438   4                smBusy = 0;
 439   4                flag_display = 0;
 440   4                cont = 0;
 441   4              }
 442   3                
 443   3            }
 444   2            break;
 445   2        }
 446   1        
 447   1        SI = 0;
 448   1      
 449   1        if (display_init == 1)
 450   1        {
 451   2          display_init = 2;
 452   2          smBusy = 0;
 453   2        }
 454   1          //gli serve un altro giro per fermarsi
 455   1        else if (display_init_pos == sizeof(display_init_values))
 456   1        {
 457   2          display_init_pos = 0;
 458   2          display_init = 1;
 459   2          STO = 1;
 460   2          flag_display = 0;
 461   2        }
 462   1        
 463   1      }
 464          
 465          void temp_interrupt()
 466          {
 467   1        switch(SMB0STA)
 468   1        {
 469   2          case SMB_START:
 470   2            SMB0DAT = TEMP_READ;
 471   2            STA = 0;
 472   2            break;
 473   2          case SMB_FIRSTREAD:
 474   2            STA = 0;
 475   2            break;
 476   2          case SMB_READ:
 477   2            if(readH == 0)
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 9   

 478   2            {
 479   3              tempH = SMB0DAT;
 480   3              readH = 1;
 481   3            }
 482   2            else
 483   2            {
 484   3              //calcola la parte bassa della temperatura
 485   3              tempL = SMB0DAT;
 486   3              temp_int = (tempH << 8 | tempL);
 487   3              //calcola la temperatura reale
 488   3              temp_float = (float)( temp_int >> 3 ) / 16;
 489   3              //per scrivere sul display estraggo decine e unità
 490   3              decine = (int)temp_float / 10 + 48;
 491   3              unita = (int)temp_float % 10 + 48;
 492   3              
 493   3              display_values[5] = (char)decine;
 494   3              display_values[6] = (char)unita;
 495   3              
 496   3              STO = 1;
 497   3              smBusy = 0;
 498   3            }
 499   2            break;
 500   2        }
 501   1      }
 502          
 503          void smBus() interrupt 7
 504          {
 505   1        if(interrupt_type == 0)
 506   1          accelerometer_interrupt();
 507   1        else if (interrupt_type == 1)
 508   1          display_interrupt();
 509   1        else if (interrupt_type == 2)
 510   1          temp_interrupt();
 511   1      }
 512          
 513          void average_xyz()
 514          {
 515   1        for(avg_cont = 0; avg_cont < sizeof(buffer_x); avg_cont++)
 516   1        {
 517   2          avg_x += buffer_x[avg_cont];
 518   2          avg_y += buffer_y[avg_cont];
 519   2          avg_z += buffer_z[avg_cont];
 520   2        }
 521   1        avg_x /= sizeof(buffer_x);
 522   1        avg_y /= sizeof(buffer_y);
 523   1        avg_z /= sizeof(buffer_z);
 524   1        
 525   1        display_values[12] = (char)(avg_x / 10 + 48);
 526   1        display_values[13] = (char)(avg_x % 10 + 48);
 527   1        
 528   1        display_values[16] = (char)(avg_y / 10 + 48);
 529   1        display_values[17] = (char)(avg_y % 10 + 48);
 530   1        
 531   1        display_values[20] = (char)(avg_z / 10 + 48);
 532   1        display_values[21] = (char)(avg_z % 10 + 48);
 533   1      
 534   1      }
 535          
 536          void main()
 537          {
 538   1        init();
 539   1        pwm_setup();
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 18:37:29 PAGE 10  

 540   1        mma_initialize();
 541   1        timer3_init();
 542   1        while(1)
 543   1        {
 544   2          if(flag_mma == 1){
 545   3            interrupt_type = 0;
 546   3            STA = 1;
 547   3            smBusy = 1;
 548   3            while(smBusy);
 549   3          }
 550   2          if (flag_display == 1){
 551   3            interrupt_type = 1;
 552   3            STA = 1;
 553   3            smBusy = 1;
 554   3            while(smBusy);
 555   3          }
 556   2          average_xyz();
 557   2          
 558   2          /*if (flag_temp == 1){
 559   2            interrupt_type = 2;
 560   2            AA = 1;
 561   2            STA = 1;
 562   2            smBusy = 1;
 563   2            while(smBusy);
 564   2          }*/
 565   2          
 566   2        }
 567   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2015    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =    118    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
