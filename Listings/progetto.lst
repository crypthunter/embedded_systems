C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE PROGETTO
OBJECT MODULE PLACED IN .\Objects\progetto.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE progetto.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\progetto.lst) TABS(2) OBJECT(.\Objects\progetto.obj)

line level    source

   1          #include <c8051f020.h> // SFR definitions
   2          
   3          //---------------------------------------------------VARIABILI--------------------------------------------
             ---------------------------
   4          // 0 accelerometro, 1 temperatura, 2 display
   5          unsigned char select_interrupt;
   6          //quante volte va in overflow
   7          unsigned char t3_overflow_display = 0;
   8          unsigned char t3_overflow_temp = 0;
   9          unsigned char flag_mma = 0;
  10          unsigned char flag_temp = 0;
  11          unsigned char flag_display = 0;
  12          unsigned char smBusy = 0;
  13          //tipo di azione che deve fare smbus
  14          // 0 = mma, 1 = display, 2 = temperatura
  15          unsigned char interrupt_type = 0;
  16          //variabili per la media
  17          unsigned char avg_cont = 0;
  18          int avg_x = 0;
  19          int avg_y = 0;
  20          int avg_z = 0;
  21          //------------------------------------------------------PWM-----------------------------------------------
             ----------------------------
  22          //bottone e backlight
  23          sbit button = P3^7;
  24          sbit backlight = P0^6;
  25          //contatore per il timer1
  26          unsigned char t1overFlow = 0;
  27          // 0 = bottone non premuto, 1 = bottone premuto
  28          unsigned char premuto = 0;
  29          //se è passato più di un secondo da quando il bottone è stato premuto
  30          unsigned char unSec = 0;
  31          //variabile per decidere se il backlight deve lampeggiare ( molto velocemente così da sembrare ad una lumi
             -nosità differente)
  32          //oppure restare spento
  33          unsigned char acceso = 1;
  34          //variabile per controllare la luminosità
  35          unsigned char lumi;
  36          char lumiStep = 1;
  37          //--------------------------------------------COSTANTI PERIFERICHE----------------------------------------
             --------------------------
  38          #define SMB_START 0x08 //ricevuto start
  39          #define SMB_RESTART 0x010 //ricevuto restart
  40          
  41          #define SMB_FIRSTWRITE 0x18 //scrivo il primo valore
  42          #define SMB_WRITE 0x28 // scrivo gli altri valori
  43          
  44          #define SMB_FIRSTREAD 0x40  //primo read
  45          #define SMB_READ 0x50 //altri read
  46          #define SMB_READ_NACK 0x58  //dopo che ho dato AA = 0
  47          
  48          #define MMA_WRITE 0x98 //indirizzo per scrivere sull'accelerometro
  49          #define MMA_READ 0x99  //indirizzo per leggere dall'accelerometro
  50          
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 2   

  51          #define TEMP_READ 0x91  //indirizzo per leggere dal termometro
  52          
  53          #define DISPLAY_WRITE 0x7c  //indirizzo per leggere dal display
  54          
  55          //--------------------------------------------------------ACCELEROMETRO-----------------------------------
             ---------------------------
  56          //definizione registri accelerometro
  57          #define   XOUT        0x00
  58          #define   YOUT        0x01
  59          #define   ZOUT        0x02
  60          #define   MODE        0x07
  61          
  62          unsigned char mma_init [] = {MODE, 0x01};
  63          unsigned char mma_pos = 0;
  64          unsigned char mma_init_finished = 0;
  65          unsigned char mma_read_ready = 0;
  66          
  67          char buffer_x[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  68          char buffer_y[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  69          char buffer_z[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  70          unsigned char buffer_pos = 0;
  71          
  72          int mma_value_read = 0;
  73          int i = 0;
  74          float xyz[3];
  75          unsigned char xyz_mma_pos = 0;
  76          code float TILT_XY[64] = {0, 2.69, 5.38, 8.08, 10.81, 13.55, 16.33, 19.16, 22.02, 24.95, 27.95, 31.04, 34.
             -23, 37.54, 41.01, 44.68, 48.59, 52.83, 57.54, 62.95, 69.64, 79.86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  77            0, 0, 0, 0, 0, 0, 0, -79.86, -69.64, -62.95, -57.54, -52.83, -48.59, -44.68, -41.01, -37.54, -34.23, -31
             -.04, -27.95, -24.95, -22.02, -19.16, -16.33, -13.55, -10.81, -8.08, -5.38, -2.69}; 
  78          code float TILT_Z[64] = {90.00, 87.31, 84.62, 81.92, 79.19, 76.45, 73.67, 70.84, 67.98, 65.05, 62.05, 58.9
             -6, 55.77, 52.46, 48.99, 45.32, 41.41, 37.17, 32.46, 27.05, 20.36, 10.14, 0, 0, 0, 0, 0, 0, 
  79            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.14, -20.36, -27.05, -32.46, -37.17, -41.41, -45.32, -48
             -.99, -52.46, -55.77, -58.96, -62.05, -65.05, -67.98, -70.84, -73.67, -76.45, -79.19, -81.92, -84.62};
  80          
  81          //---------------------------------------DISPLAY---------------------------------------------
  82          unsigned char display_init_values[] = {0x38, 0x39, 0x14, 0x74, 0x54, 0x6F, 0x0C, 0x0F, 0x01};
  83          unsigned char display_values[] = {0x80, 0x01, 0x40, 'T',':', '2', '0'};
  84          unsigned char display_values2[] = {0x80, 0xC0, 0x40, 'X', ':', '2' , '0', 'Y', ':', '5', '0', 'Z', ':', '4
             -', '0'};
  85          //variabile che indica se l'init è finito
  86          unsigned char display_init = 0;
  87          unsigned char display_init_pos = 0;
  88          unsigned char cont = 0;
  89          unsigned char write_finished = 0;
  90          //indica se devo scrivere sulla prima o sulla seconda linea
  91          unsigned char second_line = 0;
  92          //---------------------------------------TEMPERATURA-----------------------------------------
  93          int tempH = 0;
  94          int tempL = 0;
  95          //variabile che indica se ho letto la parte alta della temperatura
  96          unsigned char readH = 0;
  97          float temp_float = 0;
  98          int temp_int = 0;
  99          int decine = 0;
 100          int unita = 0;
 101          //---------------------------------------PROGRAMMA-------------------------------------------
 102          void init (void) {
 103   1        //abilita iinterrupt globali
 104   1        EA = 1;
 105   1        //disabilita watchdog timer
 106   1        WDTCN = 0xde;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 3   

 107   1        WDTCN = 0xad; 
 108   1        //oscillatore
 109   1        OSCICN &= 0x14;
 110   1        //clock interno
 111   1        XBR0 = 0x00;
 112   1        //abilita smbus e uart ( per spostare i pin)
 113   1        XBR0 |= 0x05;
 114   1        //crossbar, gestisce i pin
 115   1        XBR1 = 0x00;
 116   1        XBR2 = 0x40;
 117   1        //push-pull
 118   1        P1MDOUT |= 0x40;
 119   1        //push pull display
 120   1        P0MDOUT |= 0x40;
 121   1        //per l'interrupt del bottone
 122   1        EIE2 |= 0x20;
 123   1        //iinterrupt del smbus
 124   1        EIE1 |= 0x02;
 125   1        //abilita smbus
 126   1        ENSMB = 1;
 127   1        AA = 1;
 128   1      }
 129          
 130          void timer3_init()
 131          {
 132   1        TMR3H = 0xbe;
 133   1        TMR3L = 0xe6;
 134   1        //abilita iinterrupt timer3
 135   1        EIE2 |= 0x01;
 136   1        //fa partire il timer 3
 137   1        TMR3CN |= 0x04;
 138   1      }
 139          
 140          void mma_initialize()
 141          {
 142   1        //altrimenti non entra nell'interrupt
 143   1        flag_mma = 1;
 144   1        STA = 1;
 145   1        while(!mma_init_finished);
 146   1        mma_init_finished = 2;
 147   1        flag_mma = 0;
 148   1        smBusy = 0;
 149   1        //corrisponde a nessuna azione da fare su smbus
 150   1        interrupt_type = 99;
 151   1      }
 152          
 153          void timer3() interrupt 14
 154          {
 155   1        t3_overflow_display ++;
 156   1        t3_overflow_temp ++;
 157   1        //ogni volta che va in overflow (100ms)
 158   1        flag_mma = 1;
 159   1        if(t3_overflow_display == 3)
 160   1        {
 161   2          flag_display = 1;
 162   2          t3_overflow_display = 0;
 163   2        }
 164   1        
 165   1        if(t3_overflow_temp == 10)
 166   1        {
 167   2          flag_temp = 1;
 168   2          t3_overflow_temp = 0;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 4   

 169   2        }
 170   1        
 171   1        TMR3H = 0xbe;
 172   1        TMR3L = 0xe6;
 173   1        //resetta flag overflow
 174   1        TMR3CN &= 0x7f;
 175   1      }
 176          /*
 177                                            **********************************************************
 178                                            ***********************GESTIONE PWM***********************
 179                                            **********************************************************
 180          */
 181          
 182          //resetta il timer 2 senza fermarlo
 183          void resetTimer2()
 184          {
 185   1        TF2 = 0;
 186   1        TH2 = 0xf9;
 187   1        TL2 = 0x7e; 
 188   1      }
 189          
 190          void setLumi()
 191          {
 192   1        resetTimer2();
 193   1        TR2 = 1;
 194   1      }
 195          
 196          //quando il timer va in iinterrupt sono passati 200 ms, incrementa di poco la luminosità del backlight
 197          void timer2() interrupt 5
 198          {
 199   1        
 200   1        lumi = lumi + lumiStep;
 201   1        if(lumi == 255)
 202   1          lumiStep = -1;
 203   1        else if (lumi == 0)
 204   1          lumiStep = 1;
 205   1        resetTimer2();
 206   1      }
 207          
 208          //resetta il timer per contare 200ms, e t1overFlow a 0 per contare 1s
 209          void resetTimer1()
 210          {
 211   1          t1overFlow = 0;
 212   1          TF1 = 0;
 213   1          TH1 = 0x7d;
 214   1          TL1 = 0xcb; 
 215   1          TR1 = 0;
 216   1      }
 217          
 218          //immma_posta il necessario per il programma
 219          void pwm_setup()
 220          {
 221   1        //timer 0 a 8 bbit, timer 1 a 16 bbit
 222   1        TMOD = 0x10;
 223   1        //clock intero per il timer0
 224   1        CKCON = 0x8;
 225   1        //luminosità iniziale del backlight, 0 = luminosità massima
 226   1        lumi = 0;
 227   1        //abilita gli iinterrupt di timer0, timer1 e timer2
 228   1        ET0 = 1;
 229   1        ET1 = 1;
 230   1        ET2 = 1;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 5   

 231   1        //immma_posta il valore iniziale del timer 1 (conta 200 ms)
 232   1        TH1 = 0x7d;
 233   1        TL1 = 0xcb;
 234   1        //fa partire il timer 0 che gestisce pwm
 235   1        TR0 = 1;
 236   1      }
 237           
 238          //iinterrupt del timer0
 239          void timer0() interrupt 1
 240          {
 241   1        //il backlight lampeggia solo se la variabile è a 1
 242   1        if (acceso == 1)
 243   1        {
 244   2          if (!backlight) { 
 245   3            backlight = 1;    // cambia stato backlight
 246   3            TH0 = lumi; 
 247   3            TF0 = 0;    //pulisce flag interrput
 248   3          }
 249   2          else {      
 250   3            backlight = 0;
 251   3            TH0 = 255 - lumi; 
 252   3            TF0 = 0;
 253   3          }
 254   2        }
 255   1      }
 256          
 257          void buttonInt() interrupt 19
 258          {
 259   1        //se non stavo premendo il bottone e lo premo
 260   1        if(premuto == 0)
 261   1        {
 262   2          //fa partire il timer che deve contare 1 secondo
 263   2          TR1 = 1;
 264   2          //resetta l'interrupt
 265   2          EIE2 |= 0x20;
 266   2          P3IF &= 0x7f;
 267   2          //cambia in rising edge per avere un interruptt al rilascio del bottone
 268   2          P3IF |= 0x08;
 269   2          premuto = 1;
 270   2        }
 271   1        //se sto premendo il bottone e quando rilascio non è passato un secondo, deve cambiare lo stato del backl
             -ight
 272   1        else if (premuto == 1 && unSec == 0)
 273   1        {
 274   2          //resetto l'interrupt
 275   2          EIE2 |= 0x20;
 276   2          P3IF &= 0x7f;
 277   2          //rimette in falling edge il bottone
 278   2          P3IF &= 0x77;
 279   2          //cambio stato backlight
 280   2          acceso = !acceso;
 281   2          backlight = 0;
 282   2          premuto = 0;
 283   2          unSec = 0;
 284   2          //resetto e disabilito il timer
 285   2          resetTimer1();
 286   2        }
 287   1        //se lascio il bottone ma è passato più di un secondo
 288   1        else if (premuto == 1 && unSec == 1)
 289   1        {
 290   2          //devo fermare il timer2 usato per regolare la luminosità
 291   2          TR2 = 0;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 6   

 292   2          resetTimer2();
 293   2          premuto = 0;
 294   2          unSec = 0;
 295   2          //resetta e disabilito il timer
 296   2          resetTimer1();
 297   2          //resetta l'interrupt
 298   2          EIE2 |= 0x20;
 299   2          P3IF &= 0x7f;
 300   2          //rimette in falling edge il bottone
 301   2          P3IF &= 0x77;
 302   2        }
 303   1      }
 304          
 305          void timer1() interrupt 3
 306          {
 307   1        t1overFlow++;
 308   1        //se il contatore è a 5 significa che è passato 1 secondo
 309   1        if(t1overFlow == 5)
 310   1        {
 311   2          //fermo il timer
 312   2          resetTimer1();
 313   2          unSec = 1;
 314   2          //immma_posto la luminosità solo se il bottone è acceso
 315   2          if (acceso == 1)
 316   2          {
 317   3            setLumi();
 318   3          }
 319   2        }
 320   1        else
 321   1        {
 322   2          TF1 = 0;
 323   2          TH1 = 0x7d;
 324   2          TL1 = 0xcb; 
 325   2        }
 326   1      }
 327          
 328          /*
 329                                            **********************************************************
 330                                            ***********************ACCELEROMETRO**********************
 331                                            **********************************************************
 332          */
 333          
 334          void accelerometer_interrupt()
 335          {
 336   1        
 337   1        if(mma_pos == sizeof(mma_init))
 338   1            {
 339   2              mma_pos = 0;
 340   2              mma_init_finished = 1;
 341   2              STO = 1;
 342   2              //STA = 1;
 343   2            }
 344   1            switch(SMB0STA)
 345   1            {
 346   2              case SMB_START:
 347   2                SMB0DAT = MMA_WRITE;
 348   2                STA = 0;
 349   2                //smBusy = 1;
 350   2                break;
 351   2              
 352   2              //gli devo dare indirizzo di lettura
 353   2              case SMB_RESTART:
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 7   

 354   2                SMB0DAT = MMA_READ;
 355   2                STA = 0;
 356   2                break;
 357   2      
 358   2              case SMB_FIRSTWRITE:
 359   2              case SMB_WRITE:
 360   2                if(mma_init_finished == 0)
 361   2                {
 362   3                  SMB0DAT = mma_init[mma_pos];
 363   3                  mma_pos++;
 364   3                }
 365   2                else if(mma_init_finished == 2)
 366   2                {
 367   3                  if(!mma_read_ready)
 368   3                  {
 369   4                    SMB0DAT = XOUT;
 370   4                    //dice che mma è pronto a leggere
 371   4                    mma_read_ready = 1;
 372   4                  }
 373   3                  else
 374   3                    STA = 1;
 375   3                }
 376   2                break;
 377   2                
 378   2              case SMB_FIRSTREAD:
 379   2                STA = 0;
 380   2                break;
 381   2              
 382   2              case SMB_READ:
 383   2                mma_value_read = SMB0DAT;
 384   2                mma_value_read &= 00111111;
 385   2                xyz[xyz_mma_pos] = TILT_XY[mma_value_read];
 386   2                if(xyz_mma_pos == 1)
 387   2                  AA = 0;
 388   2              
 389   2                xyz_mma_pos++;
 390   2                break;
 391   2              
 392   2              case SMB_READ_NACK:
 393   2                mma_value_read &= 00111111;
 394   2                xyz[xyz_mma_pos] = TILT_Z[mma_value_read];
 395   2                STO = 1;
 396   2                AA = 1;
 397   2                //reset flag e variabili
 398   2                smBusy = 0;
 399   2                flag_mma = 0;
 400   2                mma_read_ready = 0;
 401   2                xyz_mma_pos = 0;
 402   2              
 403   2                buffer_x[buffer_pos] = xyz[0];
 404   2                buffer_y[buffer_pos] = xyz[1];
 405   2                buffer_z[buffer_pos] = xyz[2];
 406   2              
 407   2                if(buffer_pos == 7)
 408   2                  buffer_pos = 0;
 409   2                else
 410   2                  buffer_pos ++;
 411   2                
 412   2            }
 413   1            SI = 0;
 414   1      }
 415          
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 8   

 416          void display_interrupt()
 417          {
 418   1        
 419   1        switch(SMB0STA)
 420   1        {
 421   2          //primo start
 422   2          case SMB_START:
 423   2            cont = 0;
 424   2            SMB0DAT = DISPLAY_WRITE; // carica indirizzo slave display
 425   2            STA = 0;
 426   2            break;
 427   2          
 428   2          case SMB_FIRSTWRITE:
 429   2          case SMB_WRITE:
 430   2            if(display_init == 0)
 431   2            {
 432   3              SMB0DAT = display_init_values[display_init_pos];
 433   3              display_init_pos++;
 434   3            }
 435   2            //scritture successive all'init
 436   2           else if (display_init == 2)
 437   2            {
 438   3              if(second_line == 0)
 439   3              {
 440   4                SMB0DAT = display_values[cont];
 441   4                if(cont == sizeof(display_values))
 442   4                {
 443   5                  STO = 1;
 444   5                  STA = 1;
 445   5                  second_line = 1;
 446   5                }
 447   4                cont++;
 448   4                
 449   4              }
 450   3              else
 451   3              {
 452   4                SMB0DAT = display_values2[cont];
 453   4                if(cont == sizeof(display_values2))
 454   4                {
 455   5                  STO = 1;
 456   5                  smBusy = 0;
 457   5                  flag_display = 0;
 458   5                  second_line = 0;
 459   5                }
 460   4                cont++;
 461   4              }
 462   3                
 463   3            }
 464   2            break;
 465   2        }
 466   1        
 467   1        SI = 0;
 468   1      
 469   1        if (display_init == 1)
 470   1        {
 471   2          display_init = 2;
 472   2          smBusy = 0;
 473   2        }
 474   1          //gli serve un altro giro per fermarsi
 475   1        else if (display_init_pos == sizeof(display_init_values))
 476   1        {
 477   2          display_init_pos = 0;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 9   

 478   2          display_init = 1;
 479   2          STO = 1;
 480   2          flag_display = 0;
 481   2        }
 482   1        
 483   1      }
 484          
 485          void temp_interrupt()
 486          {
 487   1        switch(SMB0STA)
 488   1        {
 489   2          case SMB_START:
 490   2            SMB0DAT = TEMP_READ;
 491   2            STA = 0;
 492   2            break;
 493   2          case SMB_FIRSTREAD:
 494   2            STA = 0;
 495   2            break;
 496   2          case SMB_READ:
 497   2            if(readH == 0)
 498   2            {
 499   3              tempH = SMB0DAT;
 500   3              readH = 1;
 501   3            }
 502   2            else
 503   2            {
 504   3              //calcola la parte bassa della temperatura
 505   3              tempL = SMB0DAT;
 506   3              temp_int = (tempH << 8 | tempL);
 507   3              //calcola la temperatura reale
 508   3              temp_float = (float)( temp_int >> 3 ) / 16;
 509   3              //per scrivere sul display estraggo decine e unità
 510   3              decine = (int)temp_float / 10 + 48;
 511   3              unita = (int)temp_float % 10 + 48;
 512   3              
 513   3              display_values[5] = (char)decine;
 514   3              display_values[6] = (char)unita;
 515   3              
 516   3              STO = 1;
 517   3              smBusy = 0;
 518   3              readH = 0;
 519   3              flag_temp = 0;
 520   3            }
 521   2            break;
 522   2        }
 523   1        
 524   1        SI = 0;
 525   1      }
 526          
 527          void smBus() interrupt 7
 528          {
 529   1        if(interrupt_type == 0)
 530   1          accelerometer_interrupt();
 531   1        else if (interrupt_type == 1)
 532   1          display_interrupt();
 533   1        else if (interrupt_type == 2)
 534   1          temp_interrupt();
 535   1      }
 536          
 537          void average_xyz()
 538          {
 539   1        for(avg_cont = 0; avg_cont < sizeof(buffer_x); avg_cont++)
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 10  

 540   1        {
 541   2          avg_x += buffer_x[avg_cont];
 542   2          avg_y += buffer_y[avg_cont];
 543   2          avg_z += buffer_z[avg_cont];
 544   2        }
 545   1        avg_x /= sizeof(buffer_x);
 546   1        avg_y /= sizeof(buffer_y);
 547   1        avg_z /= sizeof(buffer_z);
 548   1        
 549   1        display_values2[5] = (char)(avg_x / 10 + 48);
 550   1        display_values2[6] = (char)(avg_x % 10 + 48);
 551   1        
 552   1        display_values2[9] = (char)(avg_y / 10 + 48);
 553   1        display_values2[10] = (char)(avg_y % 10 + 48);
 554   1        
 555   1        display_values2[13] = (char)(avg_z / 10 + 48);
 556   1        display_values2[14] = (char)(avg_z % 10 + 48);
 557   1      
 558   1      }
 559          
 560          void main()
 561          {
 562   1        init();
 563   1        pwm_setup();
 564   1        mma_initialize();
 565   1        timer3_init();
 566   1        while(1)
 567   1        {
 568   2          if(flag_mma == 1){
 569   3            interrupt_type = 0;
 570   3            STA = 1;
 571   3            smBusy = 1;
 572   3            while(smBusy);
 573   3          }
 574   2          if (flag_display == 1){
 575   3            interrupt_type = 1;
 576   3            STA = 1;
 577   3            smBusy = 1;
 578   3            while(smBusy);
 579   3          }
 580   2          average_xyz();
 581   2          
 582   2          if (flag_temp == 1){
 583   3            interrupt_type = 2;
 584   3            STA = 1;
 585   3            smBusy = 1;
 586   3            while(smBusy);
 587   3          }
 588   2          
 589   2        }
 590   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2152    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =    119    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.57.0.0   PROGETTO                                                          06/25/2018 15:13:31 PAGE 11  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
