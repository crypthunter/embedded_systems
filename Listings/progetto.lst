C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE PROGETTO
OBJECT MODULE PLACED IN .\Objects\progetto.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE progetto.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\progetto.lst) TABS(2) OBJECT(.\Objects\progetto.obj)

line level    source

   1          #include <c8051f020.h> // SFR definitions
   2          
   3          //---------------------------------------------------VARIABILI--------------------------------------------
             ---------------------------
   4          // 0 accelerometro, 1 temperatura, 2 display
   5          unsigned char select_interrupt;
   6          //quante volte va in overflow
   7          unsigned char t3_overflow_display = 0;
   8          unsigned char t3_overflow_temp = 0;
   9          unsigned char flag_mma = 0;
  10          unsigned char flag_temp = 0;
  11          unsigned char flag_display = 0;
  12          unsigned char smBusy = 0;
  13          //tipo di azione che deve fare smbus
  14          // 0 = mma, 1 = display, 2 = temperatura
  15          unsigned char interrupt_type = 0;
  16          //variabili per la media
  17          unsigned char avg_cont = 0;
  18          unsigned char avg_x = 0;
  19          unsigned char avg_y = 0;
  20          unsigned char avg_z = 0;
  21          //------------------------------------------------------PWM-----------------------------------------------
             ----------------------------
  22          //bottone e backlight
  23          sbit button = P3^7;
  24          sbit backlight = P0^6;
  25          //contatore per il timer1
  26          unsigned char t1overFlow = 0;
  27          // 0 = bottone non premuto, 1 = bottone premuto
  28          unsigned char premuto = 0;
  29          //se è passato più di un secondo da quando il bottone è stato premuto
  30          unsigned char unSec = 0;
  31          //variabile per decidere se il backlight deve lampeggiare ( molto velocemente così da sembrare ad una lumi
             -nosità differente)
  32          //oppure restare spento
  33          unsigned char acceso = 1;
  34          //variabile per controllare la luminosità
  35          unsigned char lumi;
  36          //--------------------------------------------COSTANTI PERIFERICHE----------------------------------------
             --------------------------
  37          #define SMB_START 0x08 //ricevuto start
  38          #define SMB_RESTART 0x010 //ricevuto restart
  39          
  40          #define SMB_FIRSTWRITE 0x18 //scrivo il primo valore
  41          #define SMB_WRITE 0x28 // scrivo gli altri valori
  42          
  43          #define SMB_FIRSTREAD 0x40  //primo read
  44          #define SMB_READ 0x50 //altri read
  45          #define SMB_READ_NACK 0x58  //dopo che ho dato AA = 0
  46          
  47          #define MMA_WRITE 0x98 //indirizzo per scrivere sull'accelerometro
  48          #define MMA_READ 0x99  //indirizzo per leggere dall'accelerometro
  49          
  50          #define TMP_READ 0x91  //indirizzo per leggere dal termometro
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 2   

  51          
  52          #define DISPLAY_WRITE 0x7c  //indirizzo per leggere dal display
  53          
  54          //--------------------------------------------------------ACCELEROMETRO-----------------------------------
             ---------------------------
  55          //definizione registri accelerometro
  56          #define   XOUT        0x00
  57          #define   YOUT        0x01
  58          #define   ZOUT        0x02
  59          #define   MODE        0x07
  60          
  61          unsigned char mma_init [] = {MODE, 0x01};
  62          unsigned char mma_pos = 0;
  63          unsigned char mma_init_finished = 0;
  64          unsigned char mma_read_ready = 0;
  65          
  66          float buffer_x[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  67          float buffer_y[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  68          float buffer_z[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  69          unsigned char buffer_pos = 0;
  70          
  71          int mma_value_read = 0;
  72          int i = 0;
  73          float xyz[3];
  74          unsigned char xyz_mma_pos = 0;
  75          code float TILT_XY[64] = {0, 2.69, 5.38, 8.08, 10.81, 13.55, 16.33, 19.16, 22.02, 24.95, 27.95, 31.04, 34.
             -23, 37.54, 41.01, 44.68, 48.59, 52.83, 57.54, 62.95, 69.64, 79.86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  76            0, 0, 0, 0, 0, 0, 0, -79.86, -69.64, -62.95, -57.54, -52.83, -48.59, -44.68, -41.01, -37.54, -34.23, -31
             -.04, -27.95, -24.95, -22.02, -19.16, -16.33, -13.55, -10.81, -8.08, -5.38, -2.69}; 
  77          code float TILT_Z[64] = {90.00, 87.31, 84.62, 81.92, 79.19, 76.45, 73.67, 70.84, 67.98, 65.05, 62.05, 58.9
             -6, 55.77, 52.46, 48.99, 45.32, 41.41, 37.17, 32.46, 27.05, 20.36, 10.14, 0, 0, 0, 0, 0, 0, 
  78            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.14, -20.36, -27.05, -32.46, -37.17, -41.41, -45.32, -48
             -.99, -52.46, -55.77, -58.96, -62.05, -65.05, -67.98, -70.84, -73.67, -76.45, -79.19, -81.92, -84.62};
  79          
  80          //---------------------------------------DISPLAY---------------------------------------------
  81          unsigned char display_init_values[] = {0x38, 0x39, 0x14, 0x74, 0x54, 0x6F, 0x0C, 0x01};
  82          unsigned char display_values[] = {0x80, 0x01, 0x40, 'T',':', '2', '0', 0x80, 0xC0, 0x40, 'X', ':', '2' , '
             -0', 'Y', ':', '5', '0', 'Z', ':', '4', '0'};
  83          //variabile che indica se l'init è finito
  84          unsigned char display_init = 0;
  85          unsigned char display_init_pos = 0;
  86          unsigned char cont = 0;
  87          unsigned char cont1 = 0;
  88          unsigned char write_finished = 0;
  89          //---------------------------------------PROGRAMMA-------------------------------------------
  90          void init (void) {
  91   1        //abilita iinterrupt globali
  92   1        EA = 1;
  93   1        //disabilita watchdog timer
  94   1        WDTCN = 0xde;
  95   1        WDTCN = 0xad; 
  96   1        //oscillatore
  97   1        OSCICN &= 0x14;
  98   1        //clock interno
  99   1        XBR0 = 0x00;
 100   1        //abilita smbus e uart ( per spostare i pin)
 101   1        XBR0 |= 0x05;
 102   1        //crossbar, gestisce i pin
 103   1        XBR1 = 0x00;
 104   1        XBR2 = 0x40;
 105   1        //push-pull
 106   1        P1MDOUT |= 0x40;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 3   

 107   1        //push pull display
 108   1        P0MDOUT |= 0x40;
 109   1        //per l'interrupt del bottone
 110   1        EIE2 |= 0x20;
 111   1        //iinterrupt del smbus
 112   1        EIE1 |= 0x02;
 113   1        //abilita smbus
 114   1        ENSMB = 1;
 115   1        AA = 1;
 116   1      }
 117          
 118          void timer3_init()
 119          {
 120   1        TMR3H = 0xbe;
 121   1        TMR3L = 0xe6;
 122   1        //abilita iinterrupt timer3
 123   1        EIE2 |= 0x01;
 124   1        //fa partire il timer 3
 125   1        TMR3CN |= 0x04;
 126   1      }
 127          
 128          void mma_initialize()
 129          {
 130   1        //altrimenti non entra nell'interrupt
 131   1        flag_mma = 1;
 132   1        STA = 1;
 133   1        while(!mma_init_finished);
 134   1        //STO = 1;
 135   1        //for(i = 0; i < 1000; i++);
 136   1        mma_init_finished = 2;
 137   1        flag_mma = 0;
 138   1        smBusy = 0;
 139   1        //corrisponde a nessuna azione da fare su smbus
 140   1        interrupt_type = 99;
 141   1      }
 142          
 143          void timer3() interrupt 14
 144          {
 145   1        t3_overflow_display ++;
 146   1        t3_overflow_temp ++;
 147   1        //ogni volta che va in overflow (100ms)
 148   1        flag_mma = 1;
 149   1        if(t3_overflow_display == 3)
 150   1        {
 151   2          flag_display = 1;
 152   2          t3_overflow_display = 0;
 153   2        }
 154   1        
 155   1        if(t3_overflow_temp == 10)
 156   1        {
 157   2          flag_temp = 1;
 158   2          t3_overflow_temp = 0;
 159   2        }
 160   1        
 161   1        TMR3H = 0xbe;
 162   1        TMR3L = 0xe6;
 163   1        //resetta flag overflow
 164   1        TMR3CN &= 0x7f;
 165   1      }
 166          /*
 167                                            **********************************************************
 168                                            ***********************GESTIONE PWM***********************
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 4   

 169                                            **********************************************************
 170          */
 171          
 172          //resetta il timer 2 senza fermarlo
 173          void resetTimer2()
 174          {
 175   1        TF2 = 0;
 176   1        TH2 = 0xf9;
 177   1        TL2 = 0x7e; 
 178   1      }
 179          
 180          void setLumi()
 181          {
 182   1        resetTimer2();
 183   1        TR2 = 1;
 184   1      }
 185          
 186          //quando il timer va in iinterrupt sono passati 200 ms, incrementa di poco la luminosità del backlight
 187          void timer2() interrupt 5
 188          {
 189   1        char lumiStep = 1;
 190   1        lumi = lumi + lumiStep;
 191   1        resetTimer2();
 192   1      }
 193          
 194          //resetta il timer per contare 200ms, e t1overFlow a 0 per contare 1s
 195          void resetTimer1()
 196          {
 197   1          t1overFlow = 0;
 198   1          TF1 = 0;
 199   1          TH1 = 0x7d;
 200   1          TL1 = 0xcb; 
 201   1          TR1 = 0;
 202   1      }
 203          
 204          //immma_posta il necessario per il programma
 205          void pwm_setup()
 206          {
 207   1        //timer 0 a 8 bbit, timer 1 a 16 bbit
 208   1        TMOD = 0x10;
 209   1        //clock intero per il timer0
 210   1        CKCON = 0x8;
 211   1        //luminosità iniziale del backlight, 0 = luminosità massima
 212   1        lumi = 0;
 213   1        //abilita gli iinterrupt di timer0, timer1 e timer2
 214   1        ET0 = 1;
 215   1        ET1 = 1;
 216   1        ET2 = 1;
 217   1        //immma_posta il valore iniziale del timer 1 (conta 200 ms)
 218   1        TH1 = 0x7d;
 219   1        TL1 = 0xcb;
 220   1        //fa partire il timer 0 che gestisce pwm
 221   1        TR0 = 1;
 222   1      }
 223           
 224          //iinterrupt del timer0
 225          void timer0() interrupt 1
 226          {
 227   1        //il backlight lampeggia solo se la variabile è a 1
 228   1        if (acceso == 1)
 229   1        {
 230   2          if (!backlight) { 
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 5   

 231   3            backlight = 1;    // cambia stato backlight
 232   3            TH0 = lumi; 
 233   3            TF0 = 0;    //pulisce flag interrput
 234   3          }
 235   2          else {      
 236   3            backlight = 0;
 237   3            TH0 = 255 - lumi; 
 238   3            TF0 = 0;
 239   3          }
 240   2        }
 241   1      }
 242          
 243          void buttonInt() interrupt 19
 244          {
 245   1        //se non stavo premendo il bottone e lo premo
 246   1        if(premuto == 0)
 247   1        {
 248   2          //fa partire il timer che deve contare 1 secondo
 249   2          TR1 = 1;
 250   2          //resetta l'interrupt
 251   2          EIE2 |= 0x20;
 252   2          P3IF &= 0x7f;
 253   2          //cambia in rising edge per avere un interruptt al rilascio del bottone
 254   2          P3IF |= 0x08;
 255   2          premuto = 1;
 256   2        }
 257   1        //se sto premendo il bottone e quando rilascio non è passato un secondo, deve cambiare lo stato del backl
             -ight
 258   1        else if (premuto == 1 && unSec == 0)
 259   1        {
 260   2          //resetto l'interrupt
 261   2          EIE2 |= 0x20;
 262   2          P3IF &= 0x7f;
 263   2          //rimette in falling edge il bottone
 264   2          P3IF &= 0x77;
 265   2          //cambio stato backlight
 266   2          acceso = !acceso;
 267   2          backlight = 0;
 268   2          premuto = 0;
 269   2          unSec = 0;
 270   2          //resetto e disabilito il timer
 271   2          resetTimer1();
 272   2        }
 273   1        //se lascio il bottone ma è passato più di un secondo
 274   1        else if (premuto == 1 && unSec == 1)
 275   1        {
 276   2          //devo fermare il timer2 usato per regolare la luminosità
 277   2          TR2 = 0;
 278   2          resetTimer2();
 279   2          premuto = 0;
 280   2          unSec = 0;
 281   2          //resetta e disabilito il timer
 282   2          resetTimer1();
 283   2          //resetta l'interrupt
 284   2          EIE2 |= 0x20;
 285   2          P3IF &= 0x7f;
 286   2          //rimette in falling edge il bottone
 287   2          P3IF &= 0x77;
 288   2        }
 289   1      }
 290          
 291          void timer1() interrupt 3
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 6   

 292          {
 293   1        t1overFlow++;
 294   1        //se il contatore è a 5 significa che è passato 1 secondo
 295   1        if(t1overFlow == 5)
 296   1        {
 297   2          //fermo il timer
 298   2          resetTimer1();
 299   2          unSec = 1;
 300   2          //immma_posto la luminosità solo se il bottone è acceso
 301   2          if (acceso == 1)
 302   2          {
 303   3            setLumi();
 304   3          }
 305   2        }
 306   1        else
 307   1        {
 308   2          TF1 = 0;
 309   2          TH1 = 0x7d;
 310   2          TL1 = 0xcb; 
 311   2        }
 312   1      }
 313          
 314          /*
 315                                            **********************************************************
 316                                            ***********************ACCELEROMETRO**********************
 317                                            **********************************************************
 318          */
 319          
 320          void accelerometer_interrupt()
 321          {
 322   1        
 323   1        if(mma_pos == sizeof(mma_init))
 324   1            {
 325   2              mma_pos = 0;
 326   2              mma_init_finished = 1;
 327   2              STO = 1;
 328   2              //STA = 1;
 329   2            }
 330   1            switch(SMB0STA)
 331   1            {
 332   2              case SMB_START:
 333   2                SMB0DAT = MMA_WRITE;
 334   2                STA = 0;
 335   2                //smBusy = 1;
 336   2                break;
 337   2              
 338   2              //gli devo dare indirizzo di lettura
 339   2              case SMB_RESTART:
 340   2                SMB0DAT = MMA_READ;
 341   2                STA = 0;
 342   2                break;
 343   2      
 344   2              case SMB_FIRSTWRITE:
 345   2              case SMB_WRITE:
 346   2                if(mma_init_finished == 0)
 347   2                {
 348   3                  SMB0DAT = mma_init[mma_pos];
 349   3                  mma_pos++;
 350   3                }
 351   2                else if(mma_init_finished == 2)
 352   2                {
 353   3                  if(!mma_read_ready)
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 7   

 354   3                  {
 355   4                    SMB0DAT = XOUT;
 356   4                    //dice che mma è pronto a leggere
 357   4                    mma_read_ready = 1;
 358   4                  }
 359   3                  else
 360   3                    STA = 1;
 361   3                }
 362   2                break;
 363   2                
 364   2              case SMB_FIRSTREAD:
 365   2                STA = 0;
 366   2                break;
 367   2              
 368   2              case SMB_READ:
 369   2                mma_value_read = SMB0DAT;
 370   2                mma_value_read &= 00111111;
 371   2                xyz[xyz_mma_pos] = TILT_XY[mma_value_read];
 372   2                if(xyz_mma_pos == 1)
 373   2                  AA = 0;
 374   2              
 375   2                xyz_mma_pos++;
 376   2                break;
 377   2              
 378   2              case SMB_READ_NACK:
 379   2                mma_value_read &= 00111111;
 380   2                xyz[xyz_mma_pos] = TILT_Z[mma_value_read];
 381   2                STO = 1;
 382   2                AA = 1;
 383   2                //reset flag e variabili
 384   2                smBusy = 0;
 385   2                flag_mma = 0;
 386   2                mma_read_ready = 0;
 387   2                xyz_mma_pos = 0;
 388   2              
 389   2                buffer_x[buffer_pos] = xyz[0];
 390   2                buffer_y[buffer_pos] = xyz[1];
 391   2                buffer_z[buffer_pos] = xyz[2];
 392   2              
 393   2                if(buffer_pos == 7)
 394   2                  buffer_pos = 0;
 395   2                else
 396   2                  buffer_pos ++;
 397   2                
 398   2            }
 399   1            SI = 0;
 400   1      }
 401          
 402          void display_interrupt()
 403          {
 404   1        
 405   1        switch(SMB0STA)
 406   1        {
 407   2          //primo start
 408   2          case SMB_START:
 409   2            //smBusy = 1;
 410   2            SMB0DAT = DISPLAY_WRITE; // carica indirizzo slave display
 411   2            STA = 0;
 412   2            break;
 413   2          
 414   2          case SMB_FIRSTWRITE:
 415   2          case SMB_WRITE:
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 8   

 416   2            if(display_init == 0)
 417   2            {
 418   3              SMB0DAT = display_init_values[display_init_pos];
 419   3              display_init_pos++;
 420   3            }
 421   2            //scritture successive all'init
 422   2           else if (display_init == 2)
 423   2            {
 424   3              SMB0DAT = display_values[cont];
 425   3              cont++;
 426   3              if(cont == sizeof(display_values))
 427   3              {
 428   4                STO = 1;
 429   4                smBusy = 0;
 430   4                flag_display = 0;
 431   4                cont = 0;
 432   4              }
 433   3                
 434   3            }
 435   2            break;
 436   2        }
 437   1        
 438   1        SI = 0;
 439   1      
 440   1        if (display_init == 1)
 441   1        {
 442   2          display_init = 2;
 443   2          smBusy = 0;
 444   2        }
 445   1          //gli serve un altro giro per fermarsi
 446   1        else if (display_init_pos == sizeof(display_init_values))
 447   1        {
 448   2          display_init_pos = 0;
 449   2          display_init = 1;
 450   2          STO = 1;
 451   2          flag_display = 0;
 452   2        }
 453   1        
 454   1      }
 455          
 456          void temp_interrupt()
 457          {
 458   1        
 459   1      }
 460          
 461          void smBus() interrupt 7
 462          {
 463   1        if(interrupt_type == 0)
 464   1          accelerometer_interrupt();
 465   1        else if (interrupt_type == 1)
 466   1          display_interrupt();
 467   1        else
 468   1          temp_interrupt();
 469   1      }
 470          
 471          void average_xyz()
 472          {
 473   1        for(avg_cont = 0; avg_cont < sizeof(buffer_x); avg_cont++)
 474   1        {
 475   2          avg_x += buffer_x[avg_cont];
 476   2          avg_y += buffer_y[avg_cont];
 477   2          avg_z += buffer_z[avg_cont];
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/22/2018 16:18:01 PAGE 9   

 478   2        }
 479   1        avg_x /= sizeof(buffer_x);
 480   1        avg_y /= sizeof(buffer_y);
 481   1        avg_z /= sizeof(buffer_z);
 482   1        
 483   1        display_values[12] = avg_x / 10;
 484   1        display_values[13] = avg_x % 10;
 485   1      }
 486          
 487          void main()
 488          {
 489   1        init();
 490   1        pwm_setup();
 491   1        mma_initialize();
 492   1        timer3_init();
 493   1        while(1)
 494   1        {
 495   2          if(flag_mma == 1){
 496   3            interrupt_type = 0;
 497   3            STA = 1;
 498   3            smBusy = 1;
 499   3            while(smBusy)
 500   3              average_xyz();
 501   3          }
 502   2          if (flag_display == 1){
 503   3            interrupt_type = 1;
 504   3            STA = 1;
 505   3            smBusy = 1;
 506   3            while(smBusy)
 507   3              average_xyz();
 508   3          }
 509   2          /*
 510   2          if (flag_temp == 1){
 511   2            interrupt_type = 2;
 512   2            STA = 1;  
 513   2            while(smBusy);
 514   2          }*/
 515   2          
 516   2        }
 517   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1404    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =    171    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
