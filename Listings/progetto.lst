C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE PROGETTO
OBJECT MODULE PLACED IN .\Objects\progetto.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE progetto.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\progetto.lst) TABS(2) OBJECT(.\Objects\progetto.obj)

line level    source

   1          #include <c8051f020.h> // SFR definitions
   2          
   3          //---------------------------------------------------VARIABILI--------------------------------------------
             ---------------------------
   4          // 0 accelerometro, 1 temperatura, 2 display
   5          unsigned char select_interrupt;
   6          //quante volte va in overflow
   7          unsigned char t3_overflow_display = 0;
   8          unsigned char t3_overflow_temp = 0;
   9          unsigned char flag_mma = 0;
  10          unsigned char flag_temp = 0;
  11          unsigned char flag_display = 0;
  12          unsigned char smBusy = 0;
  13          //tipo di azione che deve fare smbus
  14          // 0 = mma, 1 = display, 2 = temperatura
  15          unsigned char interrupt_type = 0;
  16          //------------------------------------------------------PWM-----------------------------------------------
             ----------------------------
  17          //bottone e backlight
  18          sbit button = P3^7;
  19          sbit backlight = P0^6;
  20          //contatore per il timer1
  21          unsigned char t1overFlow = 0;
  22          // 0 = bottone non premuto, 1 = bottone premuto
  23          unsigned char premuto = 0;
  24          //se è passato più di un secondo da quando il bottone è stato premuto
  25          unsigned char unSec = 0;
  26          //variabile per decidere se il backlight deve lampeggiare ( molto velocemente così da sembrare ad una lumi
             -nosità differente)
  27          //oppure restare spento
  28          unsigned char acceso = 1;
  29          //variabile per controllare la luminosità
  30          unsigned char lumi;
  31          //--------------------------------------------COSTANTI PERIFERICHE----------------------------------------
             --------------------------
  32          #define SMB_START 0x08 //ricevuto start
  33          #define SMB_RESTART 0x010 //ricevuto restart
  34          
  35          #define SMB_FIRSTWRITE 0x18 //scrivo il primo valore
  36          #define SMB_WRITE 0x28 // scrivo gli altri valori
  37          
  38          #define SMB_FIRSTREAD 0x40  //primo read
  39          #define SMB_READ 0x50 //altri read
  40          #define SMB_READ_NACK 0x58  //dopo che ho dato AA = 0
  41          
  42          #define MMA_WRITE 0x98 //indirizzo per scrivere sull'accelerometro
  43          #define MMA_READ 0x99  //indirizzo per leggere dall'accelerometro
  44          
  45          #define TMP_READ 0x91  //indirizzo per leggere dal termometro
  46          
  47          #define DISPLAY_WRITE 0x7c  //indirizzo per leggere dal display
  48          
  49          //--------------------------------------------------------ACCELEROMETRO-----------------------------------
             ---------------------------
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 2   

  50          //definizione registri accelerometro
  51          #define   XOUT        0x00
  52          #define   YOUT        0x01
  53          #define   ZOUT        0x02
  54          #define   MODE        0x07
  55          
  56          unsigned char mma_init [] = {MODE, 0x01};
  57          unsigned char mma_pos = 0;
  58          unsigned char mma_init_finished = 0;
  59          unsigned char mma_read_ready = 0;
  60          
  61          float buffer_x[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  62          float buffer_y[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  63          float buffer_z[8] = {99, 99, 99, 99, 99, 99, 99, 99};
  64          unsigned char buffer_pos = 0;
  65          
  66          int mma_value_read = 0;
  67          int i = 0;
  68          float xyz[3];
  69          unsigned char xyz_mma_pos = 0;
  70          code float TILT_XY[64] = {0, 2.69, 5.38, 8.08, 10.81, 13.55, 16.33, 19.16, 22.02, 24.95, 27.95, 31.04, 34.
             -23, 37.54, 41.01, 44.68, 48.59, 52.83, 57.54, 62.95, 69.64, 79.86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  71            0, 0, 0, 0, 0, 0, 0, -79.86, -69.64, -62.95, -57.54, -52.83, -48.59, -44.68, -41.01, -37.54, -34.23, -31
             -.04, -27.95, -24.95, -22.02, -19.16, -16.33, -13.55, -10.81, -8.08, -5.38, -2.69}; 
  72          code float TILT_Z[64] = {90.00, 87.31, 84.62, 81.92, 79.19, 76.45, 73.67, 70.84, 67.98, 65.05, 62.05, 58.9
             -6, 55.77, 52.46, 48.99, 45.32, 41.41, 37.17, 32.46, 27.05, 20.36, 10.14, 0, 0, 0, 0, 0, 0, 
  73            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.14, -20.36, -27.05, -32.46, -37.17, -41.41, -45.32, -48
             -.99, -52.46, -55.77, -58.96, -62.05, -65.05, -67.98, -70.84, -73.67, -76.45, -79.19, -81.92, -84.62};
  74          
  75            
  76          //---------------------------------------PROGRAMMA-------------------------------------------
  77          void init (void) {
  78   1        //abilita iinterrupt globali
  79   1        EA = 1;
  80   1        //disabilita watchdog timer
  81   1        WDTCN = 0xde;
  82   1        WDTCN = 0xad; 
  83   1        //oscillatore
  84   1        OSCICN &= 0x14;
  85   1        //clock interno
  86   1        XBR0 = 0x00;
  87   1        //abilita smbus e uart ( per spostare i pin)
  88   1        XBR0 |= 0x05;
  89   1        //crossbar, gestisce i pin
  90   1        XBR1 = 0x00;
  91   1        XBR2 = 0x40;
  92   1        //push-pull
  93   1        P1MDOUT |= 0x40;
  94   1        //push pull display
  95   1        P0MDOUT |= 0x40;
  96   1        //per l'interrupt del bottone
  97   1        EIE2 |= 0x20;
  98   1        //iinterrupt del smbus
  99   1        EIE1 |= 0x02;
 100   1        //abilita smbus
 101   1        ENSMB = 1;
 102   1        AA = 1;
 103   1      }
 104          
 105          void timer3_init()
 106          {
 107   1        TMR3H = 0xbe;
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 3   

 108   1        TMR3L = 0xe6;
 109   1        //abilita iinterrupt timer3
 110   1        EIE2 |= 0x01;
 111   1        //fa partire il timer 3
 112   1        TMR3CN |= 0x04;
 113   1      }
 114          
 115          void mma_initialize()
 116          {
 117   1        //altrimenti non entra nell'interrupt
 118   1        flag_mma = 1;
 119   1        STA = 1;
 120   1        while(!mma_init_finished);
 121   1        //STO = 1;
 122   1        //for(i = 0; i < 1000; i++);
 123   1        mma_init_finished = 2;
 124   1        flag_mma = 0;
 125   1        smBusy = 0;
 126   1        //corrisponde a nessuna azione da fare su smbus
 127   1        interrupt_type = 99;
 128   1      }
 129          
 130          void timer3() interrupt 14
 131          {
 132   1        t3_overflow_display ++;
 133   1        t3_overflow_temp ++;
 134   1        //ogni volta che va in overflow (100ms)
 135   1        flag_mma = 1;
 136   1        if(t3_overflow_display == 3)
 137   1        {
 138   2          flag_display = 1;
 139   2          t3_overflow_display = 0;
 140   2        }
 141   1        
 142   1        if(t3_overflow_temp == 10)
 143   1        {
 144   2          flag_temp = 1;
 145   2          t3_overflow_temp = 0;
 146   2        }
 147   1        
 148   1        TMR3H = 0xbe;
 149   1        TMR3L = 0xe6;
 150   1        //resetta flag overflow
 151   1        TMR3CN &= 0x7f;
 152   1      }
 153          /*
 154                                            **********************************************************
 155                                            ***********************GESTIONE PWM***********************
 156                                            **********************************************************
 157          */
 158          
 159          //resetta il timer 2 senza fermarlo
 160          void resetTimer2()
 161          {
 162   1        TF2 = 0;
 163   1        TH2 = 0xf9;
 164   1        TL2 = 0x7e; 
 165   1      }
 166          
 167          void setLumi()
 168          {
 169   1        resetTimer2();
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 4   

 170   1        TR2 = 1;
 171   1      }
 172          
 173          //quando il timer va in iinterrupt sono passati 200 ms, incrementa di poco la luminosità del backlight
 174          void timer2() interrupt 5
 175          {
 176   1        char lumiStep = 1;
 177   1        lumi = lumi + lumiStep;
 178   1        resetTimer2();
 179   1      }
 180          
 181          //resetta il timer per contare 200ms, e t1overFlow a 0 per contare 1s
 182          void resetTimer1()
 183          {
 184   1          t1overFlow = 0;
 185   1          TF1 = 0;
 186   1          TH1 = 0x7d;
 187   1          TL1 = 0xcb; 
 188   1          TR1 = 0;
 189   1      }
 190          
 191          //immma_posta il necessario per il programma
 192          void pwm_setup()
 193          {
 194   1        //timer 0 a 8 bbit, timer 1 a 16 bbit
 195   1        TMOD = 0x10;
 196   1        //clock intero per il timer0
 197   1        CKCON = 0x8;
 198   1        //luminosità iniziale del backlight, 0 = luminosità massima
 199   1        lumi = 0;
 200   1        //abilita gli iinterrupt di timer0, timer1 e timer2
 201   1        ET0 = 1;
 202   1        ET1 = 1;
 203   1        ET2 = 1;
 204   1        //immma_posta il valore iniziale del timer 1 (conta 200 ms)
 205   1        TH1 = 0x7d;
 206   1        TL1 = 0xcb;
 207   1        //fa partire il timer 0 che gestisce pwm
 208   1        TR0 = 1;
 209   1      }
 210           
 211          //iinterrupt del timer0
 212          void timer0() interrupt 1
 213          {
 214   1        //il backlight lampeggia solo se la variabile è a 1
 215   1        if (acceso == 1)
 216   1        {
 217   2          if (!backlight) { 
 218   3            backlight = 1;    // cambia stato backlight
 219   3            TH0 = lumi; 
 220   3            TF0 = 0;    //pulisce flag interrput
 221   3          }
 222   2          else {      
 223   3            backlight = 0;
 224   3            TH0 = 255 - lumi; 
 225   3            TF0 = 0;
 226   3          }
 227   2        }
 228   1      }
 229          
 230          void buttonInt() interrupt 19
 231          {
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 5   

 232   1        //se non stavo premendo il bottone e lo premo
 233   1        if(premuto == 0)
 234   1        {
 235   2          //fa partire il timer che deve contare 1 secondo
 236   2          TR1 = 1;
 237   2          //resetta l'interrupt
 238   2          EIE2 |= 0x20;
 239   2          P3IF &= 0x7f;
 240   2          //cambia in rising edge per avere un interruptt al rilascio del bottone
 241   2          P3IF |= 0x08;
 242   2          premuto = 1;
 243   2        }
 244   1        //se sto premendo il bottone e quando rilascio non è passato un secondo, deve cambiare lo stato del backl
             -ight
 245   1        else if (premuto == 1 && unSec == 0)
 246   1        {
 247   2          //resetto l'interrupt
 248   2          EIE2 |= 0x20;
 249   2          P3IF &= 0x7f;
 250   2          //rimette in falling edge il bottone
 251   2          P3IF &= 0x77;
 252   2          //cambio stato backlight
 253   2          acceso = !acceso;
 254   2          backlight = 0;
 255   2          premuto = 0;
 256   2          unSec = 0;
 257   2          //resetto e disabilito il timer
 258   2          resetTimer1();
 259   2        }
 260   1        //se lascio il bottone ma è passato più di un secondo
 261   1        else if (premuto == 1 && unSec == 1)
 262   1        {
 263   2          //devo fermare il timer2 usato per regolare la luminosità
 264   2          TR2 = 0;
 265   2          resetTimer2();
 266   2          premuto = 0;
 267   2          unSec = 0;
 268   2          //resetta e disabilito il timer
 269   2          resetTimer1();
 270   2          //resetta l'interrupt
 271   2          EIE2 |= 0x20;
 272   2          P3IF &= 0x7f;
 273   2          //rimette in falling edge il bottone
 274   2          P3IF &= 0x77;
 275   2        }
 276   1      }
 277          
 278          void timer1() interrupt 3
 279          {
 280   1        t1overFlow++;
 281   1        //se il contatore è a 5 significa che è passato 1 secondo
 282   1        if(t1overFlow == 5)
 283   1        {
 284   2          //fermo il timer
 285   2          resetTimer1();
 286   2          unSec = 1;
 287   2          //immma_posto la luminosità solo se il bottone è acceso
 288   2          if (acceso == 1)
 289   2          {
 290   3            setLumi();
 291   3          }
 292   2        }
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 6   

 293   1        else
 294   1        {
 295   2          TF1 = 0;
 296   2          TH1 = 0x7d;
 297   2          TL1 = 0xcb; 
 298   2        }
 299   1      }
 300          
 301          /*
 302                                            **********************************************************
 303                                            ***********************ACCELEROMETRO**********************
 304                                            **********************************************************
 305          */
 306          
 307          void accelerometer_interrupt()
 308          {
 309   1        
 310   1        if(mma_pos == sizeof(mma_init))
 311   1            {
 312   2              mma_pos = 0;
 313   2              mma_init_finished = 1;
 314   2              STO = 1;
 315   2              //STA = 1;
 316   2            }
 317   1            switch(SMB0STA)
 318   1            {
 319   2              case SMB_START:
 320   2                SMB0DAT = MMA_WRITE;
 321   2                STA = 0;
 322   2                smBusy = 1;
 323   2                break;
 324   2              
 325   2              //gli devo dare indirizzo di lettura
 326   2              case SMB_RESTART:
 327   2                SMB0DAT = MMA_READ;
 328   2                STA = 0;
 329   2                break;
 330   2      
 331   2              case SMB_FIRSTWRITE:
 332   2              case SMB_WRITE:
 333   2                if(mma_init_finished == 0)
 334   2                {
 335   3                  SMB0DAT = mma_init[mma_pos];
 336   3                  mma_pos++;
 337   3                }
 338   2                else if(mma_init_finished == 2)
 339   2                {
 340   3                  if(!mma_read_ready)
 341   3                  {
 342   4                    SMB0DAT = XOUT;
 343   4                    //dice che mma è pronto a leggere
 344   4                    mma_read_ready = 1;
 345   4                  }
 346   3                  else
 347   3                    STA = 1;
 348   3                }
 349   2                break;
 350   2                
 351   2              case SMB_FIRSTREAD:
 352   2                STA = 0;
 353   2                break;
 354   2              
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 7   

 355   2              case SMB_READ:
 356   2                mma_value_read = SMB0DAT;
 357   2                mma_value_read &= 00111111;
 358   2                xyz[xyz_mma_pos] = TILT_XY[mma_value_read];
 359   2                if(xyz_mma_pos == 1)
 360   2                  AA = 0;
 361   2              
 362   2                xyz_mma_pos++;
 363   2                break;
 364   2              
 365   2              case SMB_READ_NACK:
 366   2                mma_value_read &= 00111111;
 367   2                xyz[xyz_mma_pos] = TILT_Z[mma_value_read];
 368   2                STO = 1;
 369   2                AA = 1;
 370   2                //reset flag e variabili
 371   2                smBusy = 0;
 372   2                flag_mma = 0;
 373   2                mma_read_ready = 0;
 374   2                xyz_mma_pos = 0;
 375   2              
 376   2                buffer_x[buffer_pos] = xyz[0];
 377   2                buffer_y[buffer_pos] = xyz[1];
 378   2                buffer_z[buffer_pos] = xyz[2];
 379   2              
 380   2                if(buffer_pos == 7)
 381   2                  buffer_pos = 0;
 382   2                else
 383   2                  buffer_pos ++;
 384   2                
 385   2            }
 386   1            SI = 0;
 387   1      }
 388          
 389          void display_interrupt()
 390          {
 391   1        
 392   1      }
 393          
 394          void temp_interrupt()
 395          {
 396   1        
 397   1      }
 398          
 399          void smBus() interrupt 7
 400          {
 401   1        if(interrupt_type == 0)
 402   1          accelerometer_interrupt();
 403   1        else if (interrupt_type == 1)
 404   1          display_interrupt();
 405   1        else
 406   1          temp_interrupt();
 407   1      }
 408          
 409          void main()
 410          {
 411   1        init();
 412   1        pwm_setup();
 413   1        mma_initialize();
 414   1        timer3_init();
 415   1        while(1)
 416   1        {
C51 COMPILER V9.57.0.0   PROGETTO                                                          06/14/2018 14:49:14 PAGE 8   

 417   2          if(flag_mma == 1){
 418   3            interrupt_type = 0;
 419   3            STA = 1;
 420   3            while(smBusy);
 421   3          }
 422   2          /*if (flag_display == 1){
 423   2            interrupt_type = 1;
 424   2            STA = 1;
 425   2            while(smBusy);
 426   2          }
 427   2          if (flag_temp == 1){
 428   2            interrupt_type = 2;
 429   2            STA = 1;  
 430   2            while(smBusy);
 431   2          }*/
 432   2        }
 433   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1029    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =    132    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
